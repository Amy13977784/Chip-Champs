Voor deze baseline hebben we een random algoritme geïmplementeerd die een aantal keer wordt gerund, waardoor er meerdere 
oplossingen gegenereerd worden. Dit algoritme werkt op een chip die bestaat uit een grid met 7 lagen, vaste gates en 
verbindingen tussen gates. 

Het algoritme maakt de verbindingen door vanaf de begin-gate stappen te zetten in een willekeurige richting totdat 
de eind-gate is bereikt of er geen stappen meer mogelijk zijn. Voor elke stap kiest het algoritme eerst willekeurig een 
as (x, y of z) en vervolgens wordt er langs die as een willekeurige stap genomen (-1 of +1). Hierbij wordt rekening gehouden 
met de grenzen van het grid. Voordat de stap wordt gemaakt, checkt het algoritme of de gekozen stap nog mogelijk is. Er wordt 
gekeken of dat specifieke gridsegment nog beschikbaar is en of het niet over een andere gate loopt. Als het een geldige stap 
is, wordt deze stap toegevoegd aan een lijst van ‘occupied segments’ en begint het algoritme weer opnieuw voor de volgende stap. 

De output die gegenereerd wordt bestaat uit een dataframe, waarin voor elke connectie een lijst met de bezette coördinaten 
wordt gegeven. Daarnaast wordt er onderaan de dataframe aangegeven welke chip en welke netlijst zijn gebruikt, of de oplossing 
valide is en wat de kosten voor de oplossing zijn. 

We kunnen de prestaties van dit algoritme meten door het aantal succesvol voltooide pogingen en de kosten te vergelijken. 
Echter is het aantal valide oplossingen met een random algoritme erg schaars voor deze case. Willekeurige stappen zetten 
in een grid kan ervoor zorgen dat connecties snel vast komen te zitten. Hiermee wordt bedoeld dat alle gridsegmenten die 
een bepaald coördinaat omringen vol zitten en dat connecties nie meer verder kunnen bewegen. Dit zal ervoor zorgen dat het 
algoritme vast komt te zitten in de loop. Hierom hebben we geïmplementeerd dat het algoritme stopt met stappen zetten 
wanneer dit probleem zich voordoet. 

Een uniforme steekproef is niet mogelijk met dit algoritme door de beperking van de case (gridsegmenten mogen maar één 
keer worden afgelegd). Deze zorgt ervoor dat het algoritme niet volledig random is. Het kan namelijk na het zetten van 
één of meerdere stappen, die stappen niet opnieuw herhalen of, in andere woorden, random selecteren. Er is dus geen 
uniforme kans dat een gridsegment gekozen wordt.





